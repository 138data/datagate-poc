<!DOCTYPE html>
<html lang="ja">
<head>
    <link rel="icon" href="data:,">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ファイルダウンロード - 138DataGate</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .container {
            background: white;
            padding: 2rem;
            border-radius: 16px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            max-width: 500px;
            width: 90%;
            text-align: center;
        }
        .icon { font-size: 3rem; margin-bottom: 1rem; }
        h1 { color: #333; margin-bottom: 1rem; font-size: 1.5rem; }
        .file-info {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            margin: 1rem 0;
            text-align: left;
        }
        .file-info h3 { color: #495057; margin-bottom: 0.5rem; }
        .file-info p { color: #6c757d; margin: 0.25rem 0; }
        .otp-container { margin: 1.5rem 0; }
        .otp-container label {
            display: block;
            color: #495057;
            margin-bottom: 0.5rem;
            font-weight: 500;
        }
        #otpInput {
            width: 100%;
            padding: 12px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 1.1rem;
            text-align: center;
            letter-spacing: 0.1em;
            transition: border-color 0.3s;
        }
        #otpInput:focus { outline: none; border-color: #667eea; }
        .download-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 1rem;
            cursor: pointer;
            transition: transform 0.2s, box-shadow 0.2s;
            width: 100%;
            margin-top: 1rem;
        }
        .download-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
        }
        .download-btn:disabled {
            background: #adb5bd;
            cursor: not-allowed;
            transform: none;
        }
        .error {
            color: #dc3545;
            background: #f8d7da;
            padding: 0.75rem;
            border-radius: 4px;
            margin: 1rem 0;
        }
        .success {
            color: #155724;
            background: #d4edda;
            padding: 0.75rem;
            border-radius: 4px;
            margin: 1rem 0;
        }
        .warning {
            color: #856404;
            background: #fff3cd;
            padding: 0.75rem;
            border-radius: 4px;
            margin: 1rem 0;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        .loading { display: none; margin: 1rem 0; }
        .spinner {
            border: 2px solid #f3f3f3;
            border-top: 2px solid #667eea;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
            display: inline-block;
            margin-right: 0.5rem;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="icon">📥</div>
        <h1>ファイルダウンロード</h1>
        <div class="warning">⚠️ すべての通信は暗号化されています</div>
        <div id="fileInfo" class="file-info" style="display: none;">
            <h3>ファイル情報</h3>
            <p><strong>ファイル名:</strong> <span id="fileName">-</span></p>
            <p><strong>サイズ:</strong> <span id="fileSize">-</span></p>
            <p><strong>アップロード日時:</strong> <span id="uploadDate">-</span></p>
            <p><strong>有効期限:</strong> <span id="expiryDate">-</span></p>
        </div>
        <div class="otp-container">
            <label for="otpInput">OTP（6桁の数字）を入力してください:</label>
            <input type="text" id="otpInput" maxlength="6" placeholder="例: 123456" inputmode="numeric">
        </div>
        <button id="downloadBtn" class="download-btn" onclick="downloadFile()">ダウンロード</button>
        <div id="loading" class="loading">
            <div class="spinner"></div>
            ダウンロード中...
        </div>
        <div id="message"></div>
    </div>
    <script>
        const urlParams = new URLSearchParams(window.location.search);
        const fileId = urlParams.get('id');
        if (!fileId) {
            showError('ファイルIDが指定されていません');
        } else {
            loadFileInfo();
        }
        async function loadFileInfo() {
            try {
                const response = await fetch(`/api/download?id=${encodeURIComponent(fileId)}`);
                const data = await response.json();
                if (data.success) {
                    document.getElementById('fileName').textContent = data.fileName;
                    document.getElementById('fileSize').textContent = formatFileSize(data.size);
                    document.getElementById('uploadDate').textContent = formatDate(data.uploadedAt);
                    document.getElementById('expiryDate').textContent = formatDate(data.expiresAt);
                    document.getElementById('fileInfo').style.display = 'block';
                } else {
                    showError(data.error || 'ファイル情報の取得に失敗しました');
                }
            } catch (error) {
                console.error('File info load error:', error);
                showError('ネットワークエラーが発生しました');
            }
        }
        async function downloadFile() {
            const otp = document.getElementById('otpInput').value.trim();
            if (!otp) {
                showError('OTPを入力してください');
                return;
            }
            if (!/^\d{6}$/.test(otp)) {
                showError('OTPは6桁の数字で入力してください');
                return;
            }
            const downloadBtn = document.getElementById('downloadBtn');
            const loading = document.getElementById('loading');
            downloadBtn.disabled = true;
            loading.style.display = 'block';
            clearMessage();
            try {
                const response = await fetch('/api/download', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ id: fileId, otp: otp })
                });
                if (response.ok) {
                    const blob = await response.blob();
                    const contentDisposition = response.headers.get('Content-Disposition');
                    let fileName = 'download';
                    if (contentDisposition) {
                        const matches = contentDisposition.match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/);
                        if (matches != null && matches[1]) {
                            fileName = decodeURIComponent(matches[1].replace(/['"]/g, ''));
                        }
                    }
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = fileName;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(url);
                    showSuccess('ファイルのダウンロードが開始されました');
                } else {
                    const data = await response.json();
                    showError(data.error || 'ダウンロードに失敗しました');
                }
            } catch (error) {
                console.error('Download error:', error);
                showError('ネットワークエラーが発生しました');
            } finally {
                downloadBtn.disabled = false;
                loading.style.display = 'none';
            }
        }
        function showError(message) {
            document.getElementById('message').innerHTML = `<div class="error">${message}</div>`;
        }
        function showSuccess(message) {
            document.getElementById('message').innerHTML = `<div class="success">${message}</div>`;
        }
        function clearMessage() {
            document.getElementById('message').innerHTML = '';
        }
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleString('ja-JP');
        }
        document.getElementById('otpInput').addEventListener('input', function(e) {
            let value = e.target.value.replace(/\D/g, '');
            if (value.length > 6) value = value.substring(0, 6);
            e.target.value = value;
        });
        document.getElementById('otpInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') downloadFile();
        });
    </script>
</body>
</html>

