<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ファイルアップロード - 138DataGate</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            padding: 40px;
            max-width: 600px;
            width: 100%;
        }

        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
            font-size: 28px;
        }

        .upload-area {
            border: 3px dashed #667eea;
            border-radius: 15px;
            padding: 40px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s;
            background: #f8f9fa;
        }

        .upload-area:hover {
            background: #e9ecef;
            border-color: #764ba2;
        }

        .upload-area.dragover {
            background: #e7f1ff;
            border-color: #007bff;
        }

        .upload-icon {
            font-size: 48px;
            margin-bottom: 15px;
        }

        .upload-text {
            color: #666;
            margin-bottom: 10px;
        }

        input[type="file"] {
            display: none;
        }

        .file-info {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 15px;
            margin-top: 20px;
            display: none;
        }

        .file-info.visible {
            display: block;
        }

        .file-name {
            font-weight: bold;
            color: #333;
            margin-bottom: 5px;
        }

        .file-size {
            color: #666;
            font-size: 14px;
        }

        .btn {
            width: 100%;
            padding: 14px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            margin-top: 20px;
            transition: transform 0.2s;
        }

        .btn:hover {
            transform: translateY(-2px);
        }

        .btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
        }

        .result {
            background: #e7f9ef;
            border: 1px solid #b8e6c9;
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
            display: none;
        }

        .result.visible {
            display: block;
        }

        .result-title {
            font-weight: bold;
            color: #28a745;
            margin-bottom: 15px;
            font-size: 18px;
        }

        .result-item {
            margin-bottom: 10px;
            padding: 10px;
            background: white;
            border-radius: 5px;
        }

        .result-label {
            font-weight: bold;
            color: #666;
            margin-bottom: 5px;
        }

        .result-value {
            color: #333;
            word-break: break-all;
        }

        .otp-highlight {
            font-size: 24px;
            font-weight: bold;
            color: #dc3545;
            text-align: center;
            padding: 15px;
            background: #fff3cd;
            border: 2px solid #ffc107;
            border-radius: 8px;
            margin: 15px 0;
        }

        .copy-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            margin-left: 10px;
        }

        .copy-btn:hover {
            background: #218838;
        }

        .message {
            padding: 12px;
            border-radius: 8px;
            margin-top: 15px;
            text-align: center;
        }

        .message.error {
            background: #fee;
            color: #c33;
            border: 1px solid #fcc;
        }

        .message.success {
            background: #efe;
            color: #3c3;
            border: 1px solid #cfc;
        }

        .loading {
            display: none;
            text-align: center;
            margin-top: 20px;
        }

        .loading.active {
            display: block;
        }

        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .info-text {
            text-align: center;
            color: #666;
            font-size: 14px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>📤 ファイルアップロード</h1>
        <p style="text-align: center; color: #666; margin-bottom: 20px;">
            セキュアなファイル転送サービス
        </p>

        <div class="upload-area" id="uploadArea">
            <div class="upload-icon">📁</div>
            <div class="upload-text">
                <strong>クリックしてファイルを選択</strong><br>
                または<br>
                ファイルをドラッグ＆ドロップ
            </div>
            <small style="color: #999;">最大50MBまで</small>
        </div>

        <input type="file" id="fileInput" accept="*/*">

        <div class="file-info" id="fileInfo">
            <div class="file-name" id="fileName"></div>
            <div class="file-size" id="fileSize"></div>
        </div>

        <button class="btn" id="uploadBtn" style="display: none;">
            アップロード
        </button>

        <div class="loading" id="loading">
            <div class="spinner"></div>
            <p style="margin-top: 10px;">アップロード中...</p>
        </div>

        <div id="message" class="message" style="display: none;"></div>

        <div class="result" id="result">
            <div class="result-title">✅ アップロード完了</div>

            <div class="otp-highlight">
                OTPコード: <span id="resultOtp"></span>
                <button class="copy-btn" onclick="copyOTP()">コピー</button>
            </div>

            <div class="result-item">
                <div class="result-label">ファイル名:</div>
                <div class="result-value" id="resultFileName"></div>
            </div>

            <div class="result-item">
                <div class="result-label">ファイルサイズ:</div>
                <div class="result-value" id="resultFileSize"></div>
            </div>

            <div class="result-item">
                <div class="result-label">有効期限:</div>
                <div class="result-value" id="resultExpiresAt"></div>
            </div>

            <div class="result-item">
                <div class="result-label">ダウンロードURL:</div>
                <div class="result-value">
                    <a href="#" id="resultDownloadUrl" target="_blank"></a>
                    <button class="copy-btn" onclick="copyURL()">コピー</button>
                </div>
            </div>
        </div>

        <p class="info-text">
            🔒 すべての通信は暗号化されています<br>
            ファイルは7日後に自動削除されます
        </p>
    </div>

    <script>
        let selectedFile = null;

        const uploadArea = document.getElementById('uploadArea');
        const fileInput = document.getElementById('fileInput');
        const fileInfo = document.getElementById('fileInfo');
        const uploadBtn = document.getElementById('uploadBtn');
        const loading = document.getElementById('loading');
        const result = document.getElementById('result');

        // アップロードエリアをクリック
        uploadArea.addEventListener('click', () => {
            fileInput.click();
        });

        // ファイル選択
        fileInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                handleFile(file);
            }
        });

        // ドラッグ＆ドロップ
        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.classList.add('dragover');
        });

        uploadArea.addEventListener('dragleave', () => {
            uploadArea.classList.remove('dragover');
        });

        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
            
            const file = e.dataTransfer.files[0];
            if (file) {
                handleFile(file);
            }
        });

        // ファイル処理
        function handleFile(file) {
            selectedFile = file;

            // ファイルサイズチェック（50MB）
            const maxSize = 50 * 1024 * 1024;
            if (file.size > maxSize) {
                showMessage('ファイルサイズが上限（50MB）を超えています', 'error');
                return;
            }

            // ファイル情報表示
            document.getElementById('fileName').textContent = file.name;
            document.getElementById('fileSize').textContent = formatBytes(file.size);
            fileInfo.classList.add('visible');
            uploadBtn.style.display = 'block';
            result.classList.remove('visible');
        }

        // ファイルサイズをフォーマット
        function formatBytes(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];
        }

        // 日時をフォーマット
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleString('ja-JP', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        // メッセージ表示
        function showMessage(text, type = 'error') {
            const messageEl = document.getElementById('message');
            messageEl.textContent = text;
            messageEl.className = `message ${type}`;
            messageEl.style.display = 'block';

            setTimeout(() => {
                messageEl.style.display = 'none';
            }, 3000);
        }

        // アップロード
        uploadBtn.addEventListener('click', async () => {
            if (!selectedFile) {
                showMessage('ファイルが選択されていません', 'error');
                return;
            }

            uploadBtn.disabled = true;
            loading.classList.add('active');

            try {
                const response = await fetch('/api/upload', {
                    method: 'POST',
                    headers: {
                        'Content-Type': selectedFile.type || 'application/octet-stream',
                        'Content-Disposition': `attachment; filename="${encodeURIComponent(selectedFile.name)}"`
                    },
                    body: selectedFile
                });

                const data = await response.json();

                if (!data.success) {
                    throw new Error(data.error || 'アップロードに失敗しました');
                }

                // 結果表示
                document.getElementById('resultOtp').textContent = data.otp;
                document.getElementById('resultFileName').textContent = data.fileName;
                document.getElementById('resultFileSize').textContent = formatBytes(data.size);
                document.getElementById('resultExpiresAt').textContent = formatDate(data.expiresAt);
                document.getElementById('resultDownloadUrl').textContent = data.downloadUrl;
                document.getElementById('resultDownloadUrl').href = data.downloadUrl;

                result.classList.add('visible');
                fileInfo.classList.remove('visible');
                uploadBtn.style.display = 'none';

                showMessage('アップロードが完了しました', 'success');

            } catch (error) {
                console.error('Upload error:', error);
                showMessage(error.message, 'error');
            } finally {
                uploadBtn.disabled = false;
                loading.classList.remove('active');
            }
        });

        // OTPをコピー
        function copyOTP() {
            const otp = document.getElementById('resultOtp').textContent;
            navigator.clipboard.writeText(otp).then(() => {
                showMessage('OTPをコピーしました', 'success');
            });
        }

        // URLをコピー
        function copyURL() {
            const url = document.getElementById('resultDownloadUrl').textContent;
            navigator.clipboard.writeText(url).then(() => {
                showMessage('URLをコピーしました', 'success');
            });
        }
    </script>
</body>
</html>
