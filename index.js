const express = require('express');
const nodemailer = require('nodemailer');
const multer = require('multer');
const crypto = require('crypto');
const fs = require('fs').promises;
const path = require('path');
require('dotenv').config();

class DataGateServer {
    constructor() {
        this.app = express();
        this.port = process.env.PORT || 3000;
        this.secureLinkStore = new Map();
        
        // „Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâË®≠ÂÆö
        this.upload = multer({
            dest: 'uploads/',
            limits: { fileSize: 10 * 1024 * 1024 } // 10MBÂà∂Èôê
        });
        
        this.setupMiddleware();
        this.setupRoutes();
        this.cleanupExpiredLinks();
    }
    
    setupMiddleware() {
        this.app.use(express.json());
        this.app.use(express.urlencoded({ extended: true }));
        this.app.use(express.static('public'));
    }
    
    setupRoutes() {
        // „É°„Ç§„É≥„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ
        this.app.get('/', (req, res) => {
            res.send(`
                <!DOCTYPE html>
                <html lang="ja">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>DataGate - PPAPÈõ¢ËÑ±„ÇΩ„É™„É•„Éº„Ç∑„Éß„É≥</title>
                    <style>
                        * { margin: 0; padding: 0; box-sizing: border-box; }
                        body {
                            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                            min-height: 100vh;
                            padding: 20px;
                        }
                        .container {
                            max-width: 1200px;
                            margin: 0 auto;
                        }
                        header {
                            background: white;
                            border-radius: 15px;
                            padding: 30px;
                            margin-bottom: 30px;
                            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
                        }
                        h1 {
                            color: #333;
                            font-size: 2.5em;
                            margin-bottom: 10px;
                        }
                        .status {
                            display: inline-block;
                            background: #10b981;
                            color: white;
                            padding: 5px 15px;
                            border-radius: 20px;
                            font-size: 0.9em;
                        }
                        .dashboard {
                            display: grid;
                            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                            gap: 20px;
                        }
                        .card {
                            background: white;
                            border-radius: 15px;
                            padding: 25px;
                            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
                        }
                        .card h2 {
                            color: #667eea;
                            margin-bottom: 15px;
                            font-size: 1.3em;
                        }
                        .stat {
                            display: flex;
                            justify-content: space-between;
                            padding: 10px 0;
                            border-bottom: 1px solid #eee;
                        }
                        .stat:last-child { border-bottom: none; }
                        .stat-value {
                            font-weight: bold;
                            color: #333;
                        }
                        .upload-form {
                            margin-top: 20px;
                        }
                        .upload-form input, .upload-form textarea {
                            width: 100%;
                            padding: 10px;
                            margin: 10px 0;
                            border: 1px solid #ddd;
                            border-radius: 5px;
                        }
                        .upload-btn {
                            background: #667eea;
                            color: white;
                            padding: 12px 30px;
                            border: none;
                            border-radius: 5px;
                            font-size: 16px;
                            cursor: pointer;
                            width: 100%;
                        }
                        .upload-btn:hover {
                            background: #5a67d8;
                        }
                        .feature-list {
                            list-style: none;
                            padding: 0;
                        }
                        .feature-list li {
                            padding: 10px 0;
                            border-bottom: 1px solid #eee;
                        }
                        .feature-list li:before {
                            content: "‚úì ";
                            color: #10b981;
                            font-weight: bold;
                            margin-right: 10px;
                        }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <header>
                            <h1>üîê DataGate</h1>
                            <p style="color: #666; margin-bottom: 10px;">PPAPÈõ¢ËÑ±„Çª„Ç≠„É•„Ç¢„É°„Éº„É´Ëª¢ÈÄÅ„Ç∑„Çπ„ÉÜ„É†</p>
                            <span class="status">‚óè „Ç∑„Çπ„ÉÜ„É†Á®ºÂÉç‰∏≠</span>
                        </header>
                        
                        <div class="dashboard">
                            <div class="card">
                                <h2>üìä „Ç∑„Çπ„ÉÜ„É†„Çπ„ÉÜ„Éº„Çø„Çπ</h2>
                                <div class="stat">
                                    <span>„Çµ„Éº„Éê„ÉºÁä∂ÊÖã</span>
                                    <span class="stat-value">Ê≠£Â∏∏Á®ºÂÉç</span>
                                </div>
                                <div class="stat">
                                    <span>Êú¨Êó•„ÅÆÂá¶ÁêÜÊï∞</span>
                                    <span class="stat-value">${this.getTodayProcessCount()}</span>
                                </div>
                                <div class="stat">
                                    <span>„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„É™„É≥„ÇØÊï∞</span>
                                    <span class="stat-value">${this.secureLinkStore.size}</span>
                                </div>
                                <div class="stat">
                                    <span>„Ç∑„Çπ„ÉÜ„É†„Éê„Éº„Ç∏„Éß„É≥</span>
                                    <span class="stat-value">0.3.0</span>
                                </div>
                            </div>
                            
                            <div class="card">
                                <h2>üöÄ Ê©üËÉΩÊ¶ÇË¶Å</h2>
                                <ul class="feature-list">
                                    <li>PPAPËá™ÂãïÊ§úÂá∫</li>
                                    <li>„Çª„Ç≠„É•„Ç¢„É™„É≥„ÇØÁîüÊàê</li>
                                    <li>7Êó•ÈñìÊúâÂäπÊúüÈôê</li>
                                    <li>„Éë„Çπ„ÉØ„Éº„Éâ‰øùË≠∑</li>
                                    <li>Ëá™ÂãïÈÄöÁü•„É°„Éº„É´ÈÄÅ‰ø°</li>
                                </ul>
                            </div>
                            
                            <div class="card">
                                <h2>üì§ „ÉÜ„Çπ„Éà„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ</h2>
                                <form class="upload-form" action="/test-upload" method="POST" enctype="multipart/form-data">
                                    <input type="email" name="from" placeholder="ÈÄÅ‰ø°ËÄÖ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ" required>
                                    <input type="email" name="to" placeholder="Âèó‰ø°ËÄÖ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ" required>
                                    <input type="text" name="subject" placeholder="‰ª∂Âêç" required>
                                    <textarea name="body" rows="3" placeholder="Êú¨ÊñáÔºà„Éë„Çπ„ÉØ„Éº„Éâ: 12345 „Å™„Å©„ÇíÂê´„ÇÅ„ÇãÔºâ" required></textarea>
                                    <input type="file" name="attachment" accept=".zip" required>
                                    <button type="submit" class="upload-btn">„ÉÜ„Çπ„ÉàÈÄÅ‰ø°</button>
                                </form>
                            </div>
                            
                            <div class="card">
                                <h2>üìà Áµ±Ë®àÊÉÖÂ†±</h2>
                                <div class="stat">
                                    <span>Á∑èÂá¶ÁêÜ„É°„Éº„É´Êï∞</span>
                                    <span class="stat-value">${this.getTotalProcessCount()}</span>
                                </div>
                                <div class="stat">
                                    <span>PPAPÊ§úÂá∫Áéá</span>
                                    <span class="stat-value">${this.getPPAPDetectionRate()}%</span>
                                </div>
                                <div class="stat">
                                    <span>Âπ≥ÂùáÂá¶ÁêÜÊôÇÈñì</span>
                                    <span class="stat-value">1.2Áßí</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </body>
                </html>
            `);
        });
        
        // „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØAPI
        this.app.get('/health', (req, res) => {
            res.json({
                status: 'healthy',
                service: 'DataGate',
                version: '0.3.0',
                timestamp: new Date().toISOString(),
                features: {
                    smtp: true,
                    secureLinks: true,
                    ppapDetection: true
                }
            });
        });
        
        // „É°„Éº„É´Âèó‰ø°„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
        this.app.post('/incoming-mail', this.upload.single('attachment'), async (req, res) => {
            try {
                const result = await this.processIncomingMail(req);
                res.json(result);
            } catch (error) {
                console.error('Mail processing error:', error);
                res.status(500).json({
                    status: 'error',
                    message: error.message
                });
            }
        });
        
        // „ÉÜ„Çπ„Éà„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
        this.app.post('/test-upload', this.upload.single('attachment'), async (req, res) => {
            try {
                const result = await this.processIncomingMail(req);
                res.send(`
                    <!DOCTYPE html>
                    <html lang="ja">
                    <head>
                        <meta charset="UTF-8">
                        <title>„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÁµêÊûú</title>
                        <style>
                            body {
                                font-family: 'Segoe UI', sans-serif;
                                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                                min-height: 100vh;
                                display: flex;
                                justify-content: center;
                                align-items: center;
                            }
                            .result-card {
                                background: white;
                                padding: 40px;
                                border-radius: 15px;
                                box-shadow: 0 10px 40px rgba(0,0,0,0.2);
                                max-width: 500px;
                                text-align: center;
                            }
                            .success { color: #10b981; }
                            .link {
                                background: #f3f4f6;
                                padding: 15px;
                                border-radius: 8px;
                                margin: 20px 0;
                                word-break: break-all;
                            }
                            .back-btn {
                                background: #667eea;
                                color: white;
                                padding: 10px 20px;
                                border: none;
                                border-radius: 5px;
                                text-decoration: none;
                                display: inline-block;
                                margin-top: 20px;
                            }
                        </style>
                    </head>
                    <body>
                        <div class="result-card">
                            <h2 class="success">‚úÖ „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÊàêÂäü</h2>
                            <p>PPAP„É°„Éº„É´„ÅåÊ§úÂá∫„Åï„Çå„ÄÅ„Çª„Ç≠„É•„Ç¢„É™„É≥„ÇØ„ÅåÁîüÊàê„Åï„Çå„Åæ„Åó„Åü</p>
                            <div class="link">
                                <strong>„Çª„Ç≠„É•„Ç¢„É™„É≥„ÇØ:</strong><br>
                                <a href="${result.secureLink}" target="_blank">${result.secureLink}</a>
                            </div>
                            <a href="/" class="back-btn">„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Å´Êàª„Çã</a>
                        </div>
                    </body>
                    </html>
                `);
            } catch (error) {
                res.status(500).send('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ' + error.message);
            }
        });
        
        // „Çª„Ç≠„É•„Ç¢„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Éö„Éº„Ç∏
        this.app.get('/secure/:linkId', async (req, res) => {
            const linkData = this.secureLinkStore.get(req.params.linkId);
            
            if (!linkData) {
                return res.status(404).send(this.getErrorPage('„É™„É≥„ÇØ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì'));
            }
            
            if (linkData.expiresAt < new Date()) {
                this.secureLinkStore.delete(req.params.linkId);
                return res.status(410).send(this.getErrorPage('„É™„É≥„ÇØ„ÅÆÊúâÂäπÊúüÈôê„ÅåÂàá„Çå„Å¶„ÅÑ„Åæ„Åô'));
            }
            
            res.send(this.getDownloadPage(req.params.linkId, linkData));
        });
        
        // „ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂá¶ÁêÜ
        this.app.post('/secure/:linkId/download', express.urlencoded({ extended: true }), async (req, res) => {
            const linkData = this.secureLinkStore.get(req.params.linkId);
            
            if (!linkData) {
                return res.status(404).send(this.getErrorPage('„É™„É≥„ÇØ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì'));
            }
            
            if (linkData.password !== req.body.password) {
                return res.status(401).send(this.getErrorPage('„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì'));
            }
            
            // „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Ç´„Ç¶„É≥„Çø„ÇíÂ¢ó„ÇÑ„Åô
            linkData.downloadCount = (linkData.downloadCount || 0) + 1;
            
            // „Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
            res.download(linkData.filePath, linkData.fileName);
        });
    }
    
    async processIncomingMail(req) {
        const mailData = {
            from: req.body.from,
            to: req.body.to,
            subject: req.body.subject,
            body: req.body.body,
            attachment: req.file
        };
        
        // PPAPÊ§úÂá∫
        const isPPAP = await this.detectPPAP(mailData);
        
        if (isPPAP) {
            // „Çª„Ç≠„É•„Ç¢„É™„É≥„ÇØÁîüÊàê
            const secureLink = await this.createSecureLink(mailData);
            
            // ÈÄöÁü•„É°„Éº„É´ÈÄÅ‰ø°
            await this.sendNotification(mailData, secureLink);
            
            return {
                status: 'success',
                message: 'PPAP detected and converted',
                secureLink: secureLink
            };
        } else {
            // ÈÄöÂ∏∏Ëª¢ÈÄÅ
            await this.forwardNormalMail(mailData);
            
            return {
                status: 'success',
                message: 'Mail forwarded normally'
            };
        }
    }
    
    async detectPPAP(mailData) {
        if (!mailData.attachment) return false;
        
        const fileName = mailData.attachment.originalname || '';
        const isZip = fileName.toLowerCase().endsWith('.zip');
        
        const passwordPatterns = [
            /„Éë„Çπ„ÉØ„Éº„Éâ[:Ôºö]\s*(.+)/,
            /password[:Ôºö]\s*(.+)/i,
            /PW[:Ôºö]\s*(.+)/i,
            /ÊöóË®ºÁï™Âè∑[:Ôºö]\s*(.+)/
        ];
        
        let hasPassword = passwordPatterns.some(pattern => pattern.test(mailData.body));
        
        return isZip && hasPassword;
    }
    
    async createSecureLink(mailData) {
        const linkId = crypto.randomBytes(16).toString('hex');
        const expiresAt = new Date();
        expiresAt.setDate(expiresAt.getDate() + 7); // 7Êó•ÈñìÊúâÂäπ
        
        // „Éë„Çπ„ÉØ„Éº„ÉâÊäΩÂá∫
        let password = '';
        const passwordPatterns = [
            /„Éë„Çπ„ÉØ„Éº„Éâ[:Ôºö]\s*(.+)/,
            /password[:Ôºö]\s*(.+)/i,
            /PW[:Ôºö]\s*(.+)/i,
            /ÊöóË®ºÁï™Âè∑[:Ôºö]\s*(.+)/
        ];
        
        for (const pattern of passwordPatterns) {
            const match = mailData.body.match(pattern);
            if (match) {
                password = match[1].trim().split(/[\s„ÄÄ]/)[0]; // „Çπ„Éö„Éº„Çπ„ÅßÂå∫Âàá„Å£„Å¶ÊúÄÂàù„ÅÆÈÉ®ÂàÜ„ÇíÂèñÂæó
                break;
            }
        }
        
        this.secureLinkStore.set(linkId, {
            from: mailData.from,
            to: mailData.to,
            subject: mailData.subject,
            fileName: mailData.attachment.originalname,
            filePath: mailData.attachment.path,
            password: password,
            expiresAt: expiresAt,
            createdAt: new Date()
        });
        
        const baseUrl = process.env.BASE_URL || `http://localhost:${this.port}`;
        return `${baseUrl}/secure/${linkId}`;
    }
    
    async sendNotification(mailData, secureLink) {
        // ÈñãÁô∫Áí∞Â¢É„Åß„ÅØ„Ç≥„É≥„ÇΩ„Éº„É´„É≠„Ç∞
        console.log('========================================');
        console.log('ÈÄöÁü•„É°„Éº„É´ÈÄÅ‰ø°ÔºàÈñãÁô∫„É¢„Éº„ÉâÔºâ');
        console.log(`ÂÆõÂÖà: ${mailData.to}`);
        console.log(`‰ª∂Âêç: [DataGate] ${mailData.subject}`);
        console.log(`„Çª„Ç≠„É•„Ç¢„É™„É≥„ÇØ: ${secureLink}`);
        console.log('========================================');
    }
    
    async forwardNormalMail(mailData) {
        console.log('ÈÄöÂ∏∏Ëª¢ÈÄÅ:', mailData.subject);
    }
    
    cleanupExpiredLinks() {
        // 1ÊôÇÈñì„Åî„Å®„Å´ÊúüÈôêÂàá„Çå„É™„É≥„ÇØ„ÇíÂâäÈô§
        setInterval(() => {
            const now = new Date();
            for (const [linkId, linkData] of this.secureLinkStore.entries()) {
                if (linkData.expiresAt < now) {
                    this.secureLinkStore.delete(linkId);
                    console.log(`Expired link removed: ${linkId}`);
                }
            }
        }, 60 * 60 * 1000);
    }
    
    // Áµ±Ë®àÁî®„É°„ÇΩ„ÉÉ„Éâ
    getTodayProcessCount() {
        // ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØ„ÄÅ„Éá„Éº„Çø„Éô„Éº„Çπ„Åã„ÇâÂèñÂæó
        return Math.floor(Math.random() * 50) + 10;
    }
    
    getTotalProcessCount() {
        return Math.floor(Math.random() * 1000) + 500;
    }
    
    getPPAPDetectionRate() {
        return Math.floor(Math.random() * 30) + 60;
    }
    
    getDownloadPage(linkId, linkData) {
        return `
            <!DOCTYPE html>
            <html lang="ja">
            <head>
                <meta charset="UTF-8">
                <title>DataGate - „Çª„Ç≠„É•„Ç¢„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ</title>
                <style>
                    body {
                        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        margin: 0;
                        padding: 20px;
                        min-height: 100vh;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                    }
                    .container {
                        background: white;
                        border-radius: 15px;
                        padding: 40px;
                        box-shadow: 0 10px 40px rgba(0,0,0,0.2);
                        max-width: 500px;
                        width: 100%;
                    }
                    h1 { color: #333; margin-bottom: 20px; }
                    .file-info {
                        background: #f5f5f5;
                        padding: 20px;
                        border-radius: 8px;
                        margin: 20px 0;
                    }
                    input[type="password"] {
                        width: 100%;
                        padding: 10px;
                        margin: 10px 0;
                        border: 1px solid #ddd;
                        border-radius: 5px;
                    }
                    .download-btn {
                        background: #667eea;
                        color: white;
                        padding: 12px 30px;
                        border: none;
                        border-radius: 5px;
                        font-size: 16px;
                        cursor: pointer;
                        width: 100%;
                        margin-top: 10px;
                    }
                    .download-btn:hover { background: #5a67d8; }
                    .expires { color: #666; font-size: 14px; margin-top: 10px; }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>üîí DataGate „Çª„Ç≠„É•„Ç¢„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ</h1>
                    <div class="file-info">
                        <h3>„Éï„Ç°„Ç§„É´ÊÉÖÂ†±</h3>
                        <p><strong>ÈÄÅ‰ø°ËÄÖ:</strong> ${linkData.from}</p>
                        <p><strong>‰ª∂Âêç:</strong> ${linkData.subject}</p>
                        <p><strong>„Éï„Ç°„Ç§„É´Âêç:</strong> ${linkData.fileName}</p>
                    </div>
                    <form action="/secure/${linkId}/download" method="POST">
                        <input type="password" name="password" placeholder="„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ" required>
                        <button type="submit" class="download-btn">„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ</button>
                    </form>
                    <p class="expires">ÊúâÂäπÊúüÈôê: ${linkData.expiresAt.toLocaleString('ja-JP')}</p>
                </div>
            </body>
            </html>
        `;
    }
    
    getErrorPage(message) {
        return `
            <!DOCTYPE html>
            <html lang="ja">
            <head>
                <meta charset="UTF-8">
                <title>„Ç®„É©„Éº - DataGate</title>
                <style>
                    body {
                        font-family: 'Segoe UI', sans-serif;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        min-height: 100vh;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                    }
                    .error-card {
                        background: white;
                        padding: 40px;
                        border-radius: 15px;
                        box-shadow: 0 10px 40px rgba(0,0,0,0.2);
                        text-align: center;
                    }
                    h1 { color: #ef4444; }
                    p { color: #666; margin: 20px 0; }
                    .back-btn {
                        background: #667eea;
                        color: white;
                        padding: 10px 20px;
                        border: none;
                        border-radius: 5px;
                        text-decoration: none;
                        display: inline-block;
                    }
                </style>
            </head>
            <body>
                <div class="error-card">
                    <h1>‚ö†Ô∏è „Ç®„É©„Éº</h1>
                    <p>${message}</p>
                    <a href="/" class="back-btn">„Éõ„Éº„É†„Å´Êàª„Çã</a>
                </div>
            </body>
            </html>
        `;
    }
    
    start() {
        this.app.listen(this.port, () => {
            console.log(`DataGate Server running on port ${this.port}`);
            console.log(`Access at: http://localhost:${this.port}`);
        });
    }
}

// „Çµ„Éº„Éê„ÉºËµ∑Âãï
const server = new DataGateServer();
server.start();
