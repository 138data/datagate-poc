<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DataGate - セキュアファイル転送</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        .container {
            background: white;
            padding: 40px;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            width: 100%;
            max-width: 500px;
        }
        h1 { text-align: center; color: #333; margin-bottom: 30px; }
        .file-input-wrapper {
            border: 2px dashed #cbd5e0;
            padding: 30px;
            text-align: center;
            margin-bottom: 20px;
            cursor: pointer;
            background: #f9f9f9;
            border-radius: 10px;
        }
        .file-input-wrapper:hover { background: #f0f0f0; }
        #fileInput { /* display:none; -> overlay化により無効 */ }
        #fileName { margin-top: 10px; color: #667eea; font-weight: bold; }
        input[type="email"] {
            width: 100%;
            padding: 12px;
            margin-bottom: 20px;
            border: 1px solid #cbd5e0;
            border-radius: 8px;
            font-size: 16px;
            box-sizing: border-box;
        }
        button {
            width: 100%;
            padding: 14px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
        }
        button:hover:not(:disabled) { background: #5a67d8; }
        button:disabled { background: #cbd5e0; cursor: not-allowed; }
        #loading { display: none; text-align: center; margin: 20px 0; color: #667eea; }
        #result {
            display: none;
            margin-top: 20px;
            padding: 20px;
            border-radius: 8px;
        }
        .success {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }
        .error {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }
        .otp-display {
            background: #fff3cd;
            padding: 20px;
            margin: 15px 0;
            border-radius: 8px;
            text-align: center;
        }
        .otp-code {
            font-size: 36px;
            font-weight: bold;
            color: #e74c3c;
            letter-spacing: 8px;
        }
        .link-box {
            background: white;
            padding: 15px;
            border-radius: 5px;
            word-break: break-all;
            margin: 10px 0;
            border: 1px solid #ddd;
            font-family: monospace;
        }
        .download-link {
            display: inline-block;
            background: #48bb78;
            color: white;
            padding: 12px 24px;
            text-decoration: none;
            border-radius: 8px;
            margin: 10px 0;
            font-weight: 600;
            transition: all 0.3s;
        }
        .download-link:hover {
            background: #38a169;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(72, 187, 120, 0.4);
        }
        .copy-btn {
            background: #4299e1;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            margin-top: 10px;
        }
        .copy-btn:hover {
            background: #3182ce;
        }
            
        /* === File input overlay: click reliability & a11y === */
        .file-input-wrapper { position: relative; overflow: hidden; }
        #fileInput {
            position: absolute;
            inset: 0;           /* top:0; right:0; bottom:0; left:0; と同等 */
            width: 100%;
            height: 100%;
            opacity: 0;         /* 見えないがクリックは拾う */
            cursor: pointer;
        }
</style>
</head>
<body>
    <div class="container">
        <h1>🔐 DataGate</h1>
        
        <div class="file-input-wrapper" id="fileWrapper" class="file-input-wrapper" tabindex="0" role="button" aria-label="ファイルを選択">
            📁 ファイルを選択
            <div id="fileName"></div>
            <input type="file" id="fileInput" />
        </div>
        
        <input type="email" id="emailInput" placeholder="受信者のメールアドレス" required />
        
        <button id="uploadBtn">ファイルをアップロード</button>
        
        <div id="loading">⏳ アップロード中...</div>
        
        <div id="result"></div>
    </div>

    <script>
document.addEventListener('DOMContentLoaded', () => {
  // セレクタの冗長化（IDが異なる場合にも対応）
  const $ = (sel) => document.querySelector(sel);
  const main = (sels) => sels.map((s) => ).find(Boolean);

  const fileWrapper = main(['#fileWrapper', '.file-input-wrapper']);
  const fileInput   = main(['#fileInput', 'input[type="file"]']);
  const fileNameEl  = main(['#fileName', '.file-name', '#selectedFileName']);
  const emailInput  = main(['#emailInput', 'input[type="email"]', 'input[name="recipientEmail"]']);
  const uploadBtn   = main(['#uploadBtn', '#uploadButton', 'button[type="submit"]']);
  const loading     = main(['#loading', '.loading']);
  const result      = main(['#result', '.result']);

  // ない場合は最低限の要素を作る（デバッグしやすいように）
  const ensure = (el, label) => { if(!el) console.warn(label + ' not found'); return el; };
  ensure(fileWrapper,'fileWrapper'); ensure(fileInput,'fileInput');
  ensure(fileNameEl,'fileName'); ensure(uploadBtn,'uploadBtn');
  ensure(emailInput,'emailInput'); ensure(loading,'loading'); ensure(result,'result');

  const getSafeLink = (data) => {
    const fid = (data?.fileId || data?.id || '');
    if (data?.downloadLink) return String(data.downloadLink);
    if (fid) return location.origin + '/download.html?id=' + fid;
    return '';
  };

  // クリック/キーでファイルピッカーを開く（ラッパ限定）
  const openPicker = (e) => { e?.preventDefault?.(); fileInput?.click?.(); };
  fileWrapper?.addEventListener('click', openPicker);
  fileWrapper?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' || e.key === ' ') openPicker(e);
  });

  // ファイル名の表示
  fileInput?.addEventListener('change', (e) => {
    const f = e?.target?.files?.[0];
    if (fileNameEl) fileNameEl.textContent = f ? f.name : '';
  });

  // 送信ボタンのクリック
  uploadBtn?.addEventListener('click', async (e) => {
    e?.preventDefault?.();
    try {
      const f = fileInput?.files?.[0];
      if (!f) { alert('ファイルを選択してください'); return; }
      const email = (emailInput?.value || '').trim();
      if (!email || !email.includes('@')) { alert('有効なメールアドレスを入力してください'); return; }

      if (uploadBtn) uploadBtn.disabled = true;
      if (loading) loading.style.display = 'block';
      if (result) result.style.display = 'none';

      const fd = new FormData();
      fd.append('file', f);
      fd.append('recipientEmail', email);

      const resp = await fetch('/api/upload', { method:'POST', body: fd });
      const data = await resp.json().catch(() => ({}));

      if (data?.success) {
        const safeLink = getSafeLink(data);
        if (result) {
          result.className = 'success';
          result.innerHTML = \
            <h3>✅ アップロード成功！</h3>
            <p>\</p>
            <p><strong>ダウンロードリンク:</strong></p>
            <a href="\" target="_blank" class="download-link">📥 ダウンロードページを開く</a>
            <div class="link-box">
              \
              <button class="copy-btn" onclick="navigator.clipboard.writeText('\').then(()=>alert('リンクをコピーしました！'))">📋 リンクをコピー</button>
            </div>
            <button onclick="location.reload()" style="margin-top:20px;">新しいファイルをアップロード</button>
          \;
          result.style.display = 'block';
        }
      } else {
        throw new Error(data?.error || 'アップロードに失敗しました');
      }
    } catch (err) {
      console.error(err);
      if (result) {
        result.className = 'error';
        result.innerHTML = \<h3>❌ エラー</h3><p>\</p>\;
        result.style.display = 'block';
      }
    } finally {
      if (uploadBtn) uploadBtn.disabled = false;
      if (loading) loading.style.display = 'none';
    }
  });
});
</script>
</body>
</html>




