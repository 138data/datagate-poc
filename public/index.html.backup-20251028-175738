<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DataGate - セキュアファイル転送</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        .container {
            background: white;
            padding: 40px;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            width: 100%;
            max-width: 500px;
        }
        h1 { text-align: center; color: #333; margin-bottom: 30px; }
        .file-input-wrapper {
            border: 2px dashed #cbd5e0;
            padding: 30px;
            text-align: center;
            margin-bottom: 20px;
            cursor: pointer;
            background: #f9f9f9;
            border-radius: 10px;
        }
        .file-input-wrapper:hover { background: #f0f0f0; }
        #fileInput { /* display:none; -> overlay化により無効 */ }
        #fileName { margin-top: 10px; color: #667eea; font-weight: bold; }
        input[type="email"] {
            width: 100%;
            padding: 12px;
            margin-bottom: 20px;
            border: 1px solid #cbd5e0;
            border-radius: 8px;
            font-size: 16px;
            box-sizing: border-box;
        }
        button {
            width: 100%;
            padding: 14px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
        }
        button:hover:not(:disabled) { background: #5a67d8; }
        button:disabled { background: #cbd5e0; cursor: not-allowed; }
        #loading { display: none; text-align: center; margin: 20px 0; color: #667eea; }
        #result {
            display: none;
            margin-top: 20px;
            padding: 20px;
            border-radius: 8px;
        }
        .success {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }
        .error {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }
        .otp-display {
            background: #fff3cd;
            padding: 20px;
            margin: 15px 0;
            border-radius: 8px;
            text-align: center;
        }
        .otp-code {
            font-size: 36px;
            font-weight: bold;
            color: #e74c3c;
            letter-spacing: 8px;
        }
        .link-box {
            background: white;
            padding: 15px;
            border-radius: 5px;
            word-break: break-all;
            margin: 10px 0;
            border: 1px solid #ddd;
            font-family: monospace;
        }
        .download-link {
            display: inline-block;
            background: #48bb78;
            color: white;
            padding: 12px 24px;
            text-decoration: none;
            border-radius: 8px;
            margin: 10px 0;
            font-weight: 600;
            transition: all 0.3s;
        }
        .download-link:hover {
            background: #38a169;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(72, 187, 120, 0.4);
        }
        .copy-btn {
            background: #4299e1;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            margin-top: 10px;
        }
        .copy-btn:hover {
            background: #3182ce;
        }
            
        /* === File input overlay: click reliability & a11y === */
        .file-input-wrapper { position: relative; overflow: hidden; }
        #fileInput {
            position: absolute;
            inset: 0;           /* top:0; right:0; bottom:0; left:0; と同等 */
            width: 100%;
            height: 100%;
            opacity: 0;         /* 見えないがクリックは拾う */
            cursor: pointer;
        }
</style>
</head>
<body>
    <div class="container">
        <h1>🔐 DataGate</h1>
        
        <div class="file-input-wrapper" id="fileWrapper" class="file-input-wrapper" tabindex="0" role="button" aria-label="ファイルを選択">
            📁 ファイルを選択
            <div id="fileName"></div>
            <input type="file" id="fileInput" />
        </div>
        
        <input type="email" id="emailInput" placeholder="受信者のメールアドレス" required />
        
        <button id="uploadBtn">ファイルをアップロード</button>
        
        <div id="loading">⏳ アップロード中...</div>
        
        <div id="result"></div>
    </div>

    <script>
document.addEventListener('DOMContentLoaded', () => {
  // セレクタヘルパ（$ を使わない）
  const qs  = (sel) => document.querySelector(sel);
  const pick = (sels) => sels.map((s) => qs(s)).find(Boolean);

  const fileWrapper = pick(['#fileWrapper', '.file-input-wrapper']);
  const fileInput   = pick(['#fileInput', 'input[type="file"]']);
  const fileNameEl  = pick(['#fileName', '.file-name', '#selectedFileName']);
  const emailInput  = pick(['#emailInput', 'input[type="email"]', 'input[name="recipientEmail"]']);
  const uploadBtn   = pick(['#uploadBtn', '#uploadButton', 'button[type="submit"]']);
  const loading     = pick(['#loading', '.loading']);
  const result      = pick(['#result', '.result']);

  const getSafeLink = (data) => {
    const fid = (data && (data.fileId || data.id)) || '';
    if (data && data.downloadLink) return String(data.downloadLink);
    if (fid) return location.origin + '/download.html?id=' + fid;
    return '';
  };

  // ファイルピッカー（クリック/Enter/Space）
  const openPicker = (e) => { if (e && e.preventDefault) e.preventDefault(); if (fileInput && fileInput.click) fileInput.click(); };
  if (fileWrapper) {
    fileWrapper.addEventListener('click', openPicker);
    fileWrapper.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') openPicker(e);
    });
  }

  // ファイル名表示
  if (fileInput) {
    fileInput.addEventListener('change', (e) => {
      const f = e && e.target && e.target.files && e.target.files[0];
      if (fileNameEl) fileNameEl.textContent = f ? f.name : '';
    });
  }

  // 送信
  if (uploadBtn) {
    uploadBtn.addEventListener('click', async (e) => {
      if (e && e.preventDefault) e.preventDefault();
      try {
        const f = fileInput && fileInput.files && fileInput.files[0];
        if (!f) { alert('ファイルを選択してください'); return; }
        const email = ((emailInput && emailInput.value) || '').trim();
        if (!email || !email.includes('@')) { alert('有効なメールアドレスを入力してください'); return; }

        if (uploadBtn) uploadBtn.disabled = true;
        if (loading) loading.style.display = 'block';
        if (result) result.style.display = 'none';

        const fd = new FormData();
        fd.append('file', f);
        fd.append('recipientEmail', email);

        const resp = await fetch('/api/upload', { method:'POST', body: fd });
        const data = await resp.json().catch(() => ({}));

        if (data && data.success) {
          const safeLink = getSafeLink(data);
          if (result) {
            result.className = 'success';
            result.innerHTML = ''
              + '<h3>✅ アップロード成功！</h3>'
              + '<p>' + (data.message || 'ファイルがアップロードされました') + '</p>'
              + '<p><strong>ダウンロードリンク:</strong></p>'
              + '<a href="' + safeLink + '" target="_blank" class="download-link">📥 ダウンロードページを開く</a>'
              + '<div class="link-box">'
              +   safeLink
              +   '<button class="copy-btn" onclick="navigator.clipboard.writeText(\'' + safeLink + '\').then(()=>alert(\'リンクをコピーしました！\'))">📋 リンクをコピー</button>'
              + '</div>'
              + '<button onclick="location.reload()" style="margin-top:20px;">新しいファイルをアップロード</button>';
            result.style.display = 'block';
          }
        } else {
          throw new Error((data && data.error) || 'アップロードに失敗しました');
        }
      } catch (err) {
        console.error(err);
        if (result) {
          result.className = 'error';
          result.innerHTML = '<h3>❌ エラー</h3><p>' + (err && err.message ? err.message : String(err)) + '</p>';
          result.style.display = 'block';
        }
      } finally {
        if (uploadBtn) uploadBtn.disabled = false;
        if (loading) loading.style.display = 'none';
      }
    });
  }
});
</script>
<!-- ===== DataGate Safe Picker (isolated) ===== -->
<div id="dg-safe-picker" style="margin-top:24px; padding:16px; border:1px solid #e5e7eb; border-radius:12px;">
  <h3 style="margin:0 0 8px;">🛟 セーフ・ファイルアップロード（暫定UI）</h3>

  <div style="display:flex; gap:12px; align-items:center; flex-wrap:wrap;">
    <button id="dg-pickBtn" type="button">📁 ファイルを選択</button>
    <span>選択中: <strong id="dg-fileName">未選択</strong></span>
    <input id="dg-fileInput" type="file" style="position:absolute; left:-9999px;" />
  </div>

  <div style="margin-top:12px; display:flex; gap:12px; align-items:center; flex-wrap:wrap;">
    <input id="dg-emailInput" type="email" placeholder="送信先メールアドレス" style="min-width:260px; padding:6px 10px;" />
    <button id="dg-uploadBtn" type="button">⬆ ファイルをアップロード</button>
    <span id="dg-loading" style="display:none;">⏳ アップロード中…</span>
  </div>

  <div id="dg-result" style="display:none; margin-top:12px; padding:12px; border-radius:8px;"></div>
</div>

<script>
(function(){
  // 要素
  var pickBtn    = document.getElementById("dg-pickBtn");
  var fileInput  = document.getElementById("dg-fileInput");
  var fileNameEl = document.getElementById("dg-fileName");
  var emailInput = document.getElementById("dg-emailInput");
  var uploadBtn  = document.getElementById("dg-uploadBtn");
  var loadingEl  = document.getElementById("dg-loading");
  var resultEl   = document.getElementById("dg-result");

  // 安全リンク生成
  function safeLinkFrom(data){
    var fid = (data && (data.fileId || data.id)) || "";
    if (data && data.downloadLink) return String(data.downloadLink);
    if (fid) return (location.origin + "/download.html?id=" + fid);
    return "";
  }

  // ファイル選択（labelではなくbutton→input.clickだが、ユーザ操作起点なのでOK）
  if (pickBtn) pickBtn.addEventListener("click", function(e){
    e && e.preventDefault && e.preventDefault();
    fileInput && fileInput.click && fileInput.click();
  });

  // ファイル名表示
  if (fileInput) fileInput.addEventListener("change", function(e){
    var f = e && e.target && e.target.files && e.target.files[0];
    fileNameEl.textContent = f ? f.name : "未選択";
  });

  // アップロード
  if (uploadBtn) uploadBtn.addEventListener("click", function(e){
    e && e.preventDefault && e.preventDefault();

    var f = fileInput && fileInput.files && fileInput.files[0];
    if (!f) { alert("ファイルを選択してください"); return; }

    var email = (emailInput && emailInput.value || "").trim();
    if (!email || email.indexOf("@") === -1) { alert("有効なメールアドレスを入力してください"); return; }

    uploadBtn.disabled = true;
    loadingEl.style.display = "inline";
    resultEl.style.display = "none";
    resultEl.className = "";
    resultEl.innerHTML = "";

    var fd = new FormData();
    fd.append("file", f);
    fd.append("recipientEmail", email);

    fetch("/api/upload", { method:"POST", body: fd })
      .then(function(resp){ return resp.json(); })
      .then(function(data){
        if (data && data.success){
          var link = safeLinkFrom(data);
          resultEl.className = "success";
          resultEl.style.border = "1px solid #10b981";
          resultEl.style.background = "#ecfdf5";
          resultEl.innerHTML =
            "<div style='font-weight:600; margin-bottom:6px;'>✅ アップロード成功！</div>"
            + "<div>" + (data.message || "ファイルがアップロードされました") + "</div>"
            + "<div style='margin-top:8px;'><strong>ダウンロードリンク:</strong></div>"
            + "<div style='display:flex; gap:8px; align-items:center; flex-wrap:wrap; margin-top:4px;'>"
            +   "<a href='" + link + "' target='_blank'>📥 ダウンロードページを開く</a>"
            +   "<button type='button' onclick=\"navigator.clipboard.writeText('" + link + "').then(()=>alert('リンクをコピーしました！'))\">📋 コピー</button>"
            + "</div>";
          resultEl.style.display = "block";
        } else {
          var msg = (data && data.error) || "アップロードに失敗しました";
          throw new Error(msg);
        }
      })
      .catch(function(err){
        resultEl.className = "error";
        resultEl.style.border = "1px solid #ef4444";
        resultEl.style.background = "#fef2f2";
        resultEl.innerHTML =
          "<div style='font-weight:600; margin-bottom:6px;'>❌ エラー</div>"
          + "<div>" + (err && err.message ? err.message : String(err)) + "</div>";
        resultEl.style.display = "block";
      })
      .finally(function(){
        uploadBtn.disabled = false;
        loadingEl.style.display = "none";
      });
  });
})();
</script>
<!-- ===== /DataGate Safe Picker ===== -->
</body>
</html>






