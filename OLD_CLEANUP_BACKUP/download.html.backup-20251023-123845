<!DOCTYPE html>
<html lang="ja">
<head>
    <link rel="icon" href="data:,">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>繝輔ぃ繧､繝ｫ繝繧ｦ繝ｳ繝ｭ繝ｼ繝・- 138DataGate</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            padding: 40px;
            max-width: 500px;
            width: 100%;
        }

        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
            font-size: 28px;
        }

        .file-info {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .file-info-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            padding: 10px;
            background: white;
            border-radius: 5px;
        }

        .file-info-label {
            font-weight: bold;
            color: #666;
        }

        .file-info-value {
            color: #333;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            color: #555;
            font-weight: 500;
        }

        input[type="text"] {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
        }

        input[type="text"]:focus {
            outline: none;
            border-color: #667eea;
        }

        .btn {
            width: 100%;
            padding: 14px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: transform 0.2s;
        }

        .btn:hover {
            transform: translateY(-2px);
        }

        .btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
        }

        .message {
            padding: 12px;
            border-radius: 8px;
            margin-top: 15px;
            text-align: center;
        }

        .message.error {
            background: #fee;
            color: #c33;
            border: 1px solid #fcc;
        }

        .message.success {
            background: #efe;
            color: #3c3;
            border: 1px solid #cfc;
        }

        .loading {
            display: none;
            text-align: center;
            margin-top: 20px;
        }

        .loading.active {
            display: block;
        }

        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .info-text {
            text-align: center;
            color: #666;
            font-size: 14px;
            margin-top: 20px;
        }

        /* 繝・せ繝医・繧ｿ繝ｳ・磯幕逋ｺ迺ｰ蠅・・縺ｿ陦ｨ遉ｺ・・*/
        .test-section {
            display: none; /* 譛ｬ逡ｪ縺ｧ縺ｯ髱櫁｡ｨ遉ｺ */
            margin-top: 20px;
            padding-top: 20px;
            border-top: 2px dashed #ddd;
        }

        .test-section.visible {
            display: block;
        }

        .test-btn {
            background: #28a745;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>踏 繝輔ぃ繧､繝ｫ繝繧ｦ繝ｳ繝ｭ繝ｼ繝・/h1>

        <div id="loadingInfo" class="loading active">
            <div class="spinner"></div>
            <p style="margin-top: 10px;">繝輔ぃ繧､繝ｫ諠・ｱ繧貞叙蠕嶺ｸｭ...</p>
        </div>

        <div id="fileInfoSection" style="display: none;">
            <div class="file-info">
                <div class="file-info-item">
                    <span class="file-info-label">繝輔ぃ繧､繝ｫ蜷・</span>
                    <span class="file-info-value" id="fileName">-</span>
                </div>
                <div class="file-info-item">
                    <span class="file-info-label">繧ｵ繧､繧ｺ:</span>
                    <span class="file-info-value" id="fileSize">-</span>
                </div>
                <div class="file-info-item">
                    <span class="file-info-label">繧｢繝・・繝ｭ繝ｼ繝画律譎・</span>
                    <span class="file-info-value" id="uploadedAt">-</span>
                </div>
                <div class="file-info-item">
                    <span class="file-info-label">譛牙柑譛滄剞:</span>
                    <span class="file-info-value" id="expiresAt">-</span>
                </div>
            </div>

            <form id="downloadForm">
                <div class="form-group">
                    <label for="otp">OTP繧ｳ繝ｼ繝会ｼ・譯√・謨ｰ蟄暦ｼ・/label>
                    <input 
                        type="text" 
                        id="otp" 
                        name="otp" 
                        placeholder="123456" 
                        pattern="[0-9]{6}" 
                        maxlength="6" 
                        required 
                        autocomplete="off"
                    >
                    <small style="color: #666; display: block; margin-top: 5px;">
                        窶ｻ 繧｢繝・・繝ｭ繝ｼ繝画凾縺ｫ逋ｺ陦後＆繧後◆6譯√・謨ｰ蟄励ｒ蜈･蜉帙＠縺ｦ縺上□縺輔＞
                    </small>
                </div>

                <button type="submit" class="btn" id="downloadBtn">
                    繝繧ｦ繝ｳ繝ｭ繝ｼ繝・                </button>
            </form>

            <div id="message" class="message" style="display: none;"></div>
        </div>

        <!-- 繝・せ繝医そ繧ｯ繧ｷ繝ｧ繝ｳ・磯幕逋ｺ迺ｰ蠅・・縺ｿ・・-->
        <div id="testSection" class="test-section">
            <p style="text-align: center; color: #666; margin-bottom: 10px;">
                笞呻ｸ・髢狗匱迺ｰ蠅・畑繝・せ繝域ｩ溯・
            </p>
            <button type="button" class="btn test-btn" id="testBtn">
                繝・せ繝医ヵ繧｡繧､繝ｫ繧剃ｽｿ逕ｨ
            </button>
        </div>

        <p class="info-text">
            白 縺吶∋縺ｦ縺ｮ騾壻ｿ｡縺ｯ證怜捷蛹悶＆繧後※縺・∪縺・        </p>
    </div>

    <script>
        // 髢狗匱迺ｰ蠅・°縺ｩ縺・°繧貞愛螳・        const isDevelopment = window.location.hostname === 'localhost';
        
        // 繝・せ繝医そ繧ｯ繧ｷ繝ｧ繝ｳ縺ｮ陦ｨ遉ｺ/髱櫁｡ｨ遉ｺ
        if (isDevelopment && typeof ALLOW_TEST_UI !== 'undefined' && ALLOW_TEST_UI) {
            document.getElementById('testSection').classList.add('visible');
        }

        // URL繝代Λ繝｡繝ｼ繧ｿ縺九ｉ繝輔ぃ繧､繝ｫID繧貞叙蠕・        const urlParams = new URLSearchParams(window.location.search);
        const fileId = urlParams.get('id');

        // 繝｡繝・そ繝ｼ繧ｸ陦ｨ遉ｺ髢｢謨ｰ
        function showMessage(text, type = 'error') {
            const messageEl = document.getElementById('message');
            messageEl.textContent = text;
            messageEl.className = `message ${type}`;
            messageEl.style.display = 'block';

            // 3遘貞ｾ後↓閾ｪ蜍暮撼陦ｨ遉ｺ
            setTimeout(() => {
                messageEl.style.display = 'none';
            }, 3000);
        }

        // 繝輔ぃ繧､繝ｫ繧ｵ繧､繧ｺ繧偵ヵ繧ｩ繝ｼ繝槭ャ繝・        function formatBytes(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];
        }

        // 譌･譎ゅｒ繝輔か繝ｼ繝槭ャ繝・        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleString('ja-JP', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        // 繝輔ぃ繧､繝ｫ諠・ｱ繧貞叙蠕暦ｼ・ET: OTP荳崎ｦ・ｼ・        async function loadFileInfo() {
            if (!fileId) {
                document.getElementById('loadingInfo').classList.remove('active');
                showMessage('繝輔ぃ繧､繝ｫID縺梧欠螳壹＆繧後※縺・∪縺帙ｓ', 'error');
                return;
            }

            try {
                const response = await fetch(`/api/download?id=${encodeURIComponent(fileId)}`);
                const data = await response.json();

                document.getElementById('loadingInfo').classList.remove('active');

                if (!data.success) {
                    showMessage(data.error || '繝輔ぃ繧､繝ｫ諠・ｱ縺ｮ蜿門ｾ励↓螟ｱ謨励＠縺ｾ縺励◆', 'error');
                    return;
                }

                // 繝輔ぃ繧､繝ｫ諠・ｱ繧定｡ｨ遉ｺ
                document.getElementById('fileName').textContent = data.fileName;
                document.getElementById('fileSize').textContent = formatBytes(data.size);
                document.getElementById('uploadedAt').textContent = formatDate(data.uploadedAt);
                document.getElementById('expiresAt').textContent = formatDate(data.expiresAt);

                // 繝輔か繝ｼ繝繧ｻ繧ｯ繧ｷ繝ｧ繝ｳ繧定｡ｨ遉ｺ
                document.getElementById('fileInfoSection').style.display = 'block';

            } catch (error) {
                console.error('Error loading file info:', error);
                document.getElementById('loadingInfo').classList.remove('active');
                showMessage('繝輔ぃ繧､繝ｫ諠・ｱ縺ｮ蜿門ｾ嶺ｸｭ縺ｫ繧ｨ繝ｩ繝ｼ縺檎匱逕溘＠縺ｾ縺励◆', 'error');
            }
        }

        // 繝輔ぃ繧､繝ｫ繝繧ｦ繝ｳ繝ｭ繝ｼ繝会ｼ・OST: OTP隱崎ｨｼ・・        async function downloadFile(otp) {
            const downloadBtn = document.getElementById('downloadBtn');
            downloadBtn.disabled = true;
            downloadBtn.textContent = '繝繧ｦ繝ｳ繝ｭ繝ｼ繝我ｸｭ...';

            try {
                const response = await fetch('/api/download', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        id: fileId,
                        otp: otp
                    })
                });

                if (!response.ok) {
                    const data = await response.json();
                    throw new Error(data.error || '繝繧ｦ繝ｳ繝ｭ繝ｼ繝峨↓螟ｱ謨励＠縺ｾ縺励◆');
                }

                // 繝輔ぃ繧､繝ｫ繧偵ム繧ｦ繝ｳ繝ｭ繝ｼ繝・                const blob = await response.blob();
                const fileName = document.getElementById('fileName').textContent;
                
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = fileName;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);

                showMessage('繝繧ｦ繝ｳ繝ｭ繝ｼ繝峨′螳御ｺ・＠縺ｾ縺励◆', 'success');

            } catch (error) {
                console.error('Download error:', error);
                showMessage(error.message, 'error');
            } finally {
                downloadBtn.disabled = false;
                downloadBtn.textContent = '繝繧ｦ繝ｳ繝ｭ繝ｼ繝・;
            }
        }

        // 繝輔か繝ｼ繝騾∽ｿ｡繧､繝吶Φ繝・        document.getElementById('downloadForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const otp = document.getElementById('otp').value.trim();

            if (!otp || otp.length !== 6 || !/^\d{6}$/.test(otp)) {
                showMessage('OTP縺ｯ6譯√・謨ｰ蟄励〒蜈･蜉帙＠縺ｦ縺上□縺輔＞', 'error');
                return;
            }

            await downloadFile(otp);
        });

        // 繝・せ繝医・繧ｿ繝ｳ・磯幕逋ｺ迺ｰ蠅・・縺ｿ・・        if (isDevelopment) {
            document.getElementById('testBtn')?.addEventListener('click', () => {
                document.getElementById('otp').value = '123456';
                showMessage('繝・せ繝・TP繧貞・蜉帙＠縺ｾ縺励◆', 'success');
            });
        }

        // 繝壹・繧ｸ隱ｭ縺ｿ霎ｼ縺ｿ譎ゅ↓繝輔ぃ繧､繝ｫ諠・ｱ繧貞叙蠕・        loadFileInfo();
    </script>
</body>
</html>



