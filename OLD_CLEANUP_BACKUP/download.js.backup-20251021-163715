// api/download.js - Phase 21 Vercel対応版
import { kv } from '@vercel/kv';

// Vercel設定
export const config = {
  api: {
    bodyParser: true,
  },
};

export default async function handler(req, res) {
  // CORSヘッダー設定
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  try {
    const { id, otp } = req.query;

    console.log('[Download] リクエスト受信:', { id, otp });

    // パラメータチェック
    if (!id) {
      return res.status(400).json({
        success: false,
        error: 'ファイルIDが必要です',
      });
    }

    if (!otp) {
      return res.status(400).json({
        success: false,
        error: 'OTPが必要です',
      });
    }

    // Vercel KVからファイルデータを取得
    const fileData = await kv.get(`file:${id}`);

    if (!fileData) {
      console.log('[Download] ファイルが見つかりません:', id);
      return res.status(404).json({
        success: false,
        error: 'ファイルが見つかりません',
      });
    }

    console.log('[Download] ファイルデータ取得成功:', {
      fileName: fileData.fileName,
      size: fileData.size,
    });

    // OTP検証
    if (fileData.otp !== otp) {
      console.log('[Download] OTP不一致:', { expected: fileData.otp, received: otp });
      return res.status(403).json({
        success: false,
        error: 'OTPが正しくありません',
      });
    }

    console.log('[Download] OTP検証成功');

    // 有効期限チェック
    const now = new Date();
    const expiresAt = new Date(fileData.expiresAt);
    if (now > expiresAt) {
      console.log('[Download] ファイルの有効期限切れ');
      return res.status(410).json({
        success: false,
        error: 'ファイルの有効期限が切れています',
      });
    }

    // Base64デコード
    const fileBuffer = Buffer.from(fileData.buffer, 'base64');
    console.log('[Download] ファイルデコード完了:', fileBuffer.length, 'bytes');

    // ファイルダウンロードとして返却
    res.setHeader('Content-Type', fileData.mimeType || 'application/octet-stream');
    res.setHeader('Content-Disposition', `attachment; filename="${encodeURIComponent(fileData.fileName)}"`);
    res.setHeader('Content-Length', fileBuffer.length);

    return res.status(200).send(fileBuffer);

  } catch (error) {
    console.error('[Download] エラー:', error);
    return res.status(500).json({
      success: false,
      error: 'ファイルのダウンロードに失敗しました',
      details: error.message,
    });
  }
}
