<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DataGate - „Éï„Ç°„Ç§„É´„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        
        .container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            padding: 40px;
            max-width: 500px;
            width: 100%;
        }
        
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }
        
        .info-box {
            background: #f5f5f5;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-size: 14px;
            color: #666;
        }
        
        .file-id-display {
            background: #e3f2fd;
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 20px;
            font-family: monospace;
            font-size: 12px;
            color: #1976d2;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            color: #555;
            font-weight: 500;
        }
        
        input[type="text"] {
            width: 100%;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 20px;
            letter-spacing: 5px;
            text-align: center;
            transition: border-color 0.3s;
        }
        
        input[type="text"]:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .btn {
            width: 100%;
            padding: 14px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.2s;
        }
        
        .btn:hover:not(:disabled) {
            transform: translateY(-2px);
        }
        
        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .message {
            padding: 12px;
            border-radius: 8px;
            margin-top: 20px;
            text-align: center;
            display: none;
        }
        
        .message.error {
            background: #ffebee;
            color: #c62828;
            display: block;
        }
        
        .message.success {
            background: #e8f5e9;
            color: #2e7d32;
            display: block;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üîê DataGate</h1>
        
        <div class="info-box">
            üìß „É°„Éº„É´„ÅßÈÄÅ‰ø°„Åï„Çå„Åü6Ê°Å„ÅÆ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Ç≥„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ
        </div>
        
        <div id="fileIdDisplay" class="file-id-display">
            File ID: <span id="fileIdText">Ë™≠„ÅøËæº„Åø‰∏≠...</span>
        </div>
        
        <form id="downloadForm">
            <div class="form-group">
                <label for="otp">„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Ç≥„Éº„Éâ (OTP)</label>
                <input type="text" 
                       id="otp" 
                       name="otp" 
                       maxlength="6" 
                       pattern="[0-9a-fA-F]{6}" 
                       placeholder="‰æã: 0f9473" 
                       required 
                       autocomplete="off">
            </div>
            
            <button type="submit" class="btn" id="downloadBtn">
                „Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
            </button>
        </form>
        
        <div id="message" class="message"></div>
    </div>
    
    <script>
        // URL„Åã„Çâ„Éï„Ç°„Ç§„É´ID„ÇíÂèñÂæó
        const urlParams = new URLSearchParams(window.location.search);
        const fileId = urlParams.get('id');
        
        console.log('File ID from URL:', fileId);
        
        // „Éï„Ç°„Ç§„É´ID„ÇíË°®Á§∫
        const fileIdText = document.getElementById('fileIdText');
        if (fileId) {
            fileIdText.textContent = fileId;
        } else {
            fileIdText.textContent = '„Ç®„É©„Éº: „Éï„Ç°„Ç§„É´ID„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì';
            document.getElementById('fileIdDisplay').style.background = '#ffebee';
            document.getElementById('fileIdDisplay').style.color = '#c62828';
            document.getElementById('downloadBtn').disabled = true;
        }
        
        // „Éï„Ç©„Éº„É†ÈÄÅ‰ø°Âá¶ÁêÜ
        document.getElementById('downloadForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            if (!fileId) {
                alert('„Éï„Ç°„Ç§„É´ID„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
                return;
            }
            
            const otp = document.getElementById('otp').value;
            const btn = document.getElementById('downloadBtn');
            const messageEl = document.getElementById('message');
            
            if (!otp || otp.length !== 6) {
                messageEl.className = 'message error';
                messageEl.textContent = '6Ê°Å„ÅÆ„Ç≥„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ';
                messageEl.style.display = 'block';
                return;
            }
            
            btn.disabled = true;
            btn.textContent = '„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ‰∏≠...';
            
            console.log('Sending download request:', { fileId, otp });
            
            try {
                const response = await fetch('/api/download', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        fileId: fileId,
                        otp: otp
                    })
                });
                
                console.log('Response status:', response.status);
                
                if (response.ok) {
                    const contentType = response.headers.get('content-type');
                    
                    if (contentType && contentType.includes('application/json')) {
                        // JSON„É¨„Çπ„Éù„É≥„ÇπÔºà„Ç®„É©„ÉºÔºâ
                        const error = await response.json();
                        messageEl.className = 'message error';
                        messageEl.textContent = error.error || '„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü';
                        messageEl.style.display = 'block';
                        btn.disabled = false;
                        btn.textContent = '„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ';
                    } else {
                        // „Éï„Ç°„Ç§„É´„É¨„Çπ„Éù„É≥„ÇπÔºàÊàêÂäüÔºâ
                        const blob = await response.blob();
                        const filename = response.headers.get('Content-Disposition')
                            ?.split('filename=')[1]?.replace(/"/g, '') || 'download.txt';
                        
                        // „ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂá¶ÁêÜ
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = filename;
                        document.body.appendChild(a);
                        a.click();
                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);
                        
                        messageEl.className = 'message success';
                        messageEl.textContent = '„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂÆå‰∫ÜÔºÅ';
                        messageEl.style.display = 'block';
                        
                        btn.textContent = '„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÊ∏à„Åø';
                    }
                } else {
                    const error = await response.json();
                    console.log('Error response:', error);
                    
                    messageEl.className = 'message error';
                    messageEl.textContent = error.error || '„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü';
                    messageEl.style.display = 'block';
                    
                    btn.disabled = false;
                    btn.textContent = '„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ';
                }
                
            } catch (error) {
                console.error('Error:', error);
                messageEl.className = 'message error';
                messageEl.textContent = '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü';
                messageEl.style.display = 'block';
                
                btn.disabled = false;
                btn.textContent = '„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ';
            }
        });
        
        // OTPÂÖ•Âäõ„ÅÆËá™Âãï„Éï„Ç©„Éº„Éû„ÉÉ„Éà
        document.getElementById('otp').addEventListener('input', (e) => {
            e.target.value = e.target.value.replace(/[^0-9a-fA-F]/gi, '');
        });
    </script>
</body>
</html>




