// api/download.js - Vercel KV対応版（修正版2）
const { createClient } = require('@vercel/kv');

// KVクライアント初期化
const kv = createClient({
  url: process.env.KV_REST_API_URL,
  token: process.env.KV_REST_API_TOKEN,
});

module.exports = async function handler(req, res) {
  // CORSヘッダー設定
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'GET' && req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { id, otp } = req.method === 'GET' ? req.query : req.body;

  if (!id) {
    return res.status(400).json({ error: 'ファイルIDが必要です' });
  }

  if (!otp) {
    return res.status(400).json({ error: 'OTPが必要です' });
  }

  try {
    console.log('[Download] ダウンロード開始:', { id, otp });

    // KVからファイルデータを取得
    const fileDataRaw = await kv.get(`file:${id}`);
    
    if (!fileDataRaw) {
      console.log('[Download] ファイルが見つかりません:', id);
      return res.status(404).json({ error: 'ファイルが見つかりません' });
    }

    // データの型を確認してパース
    let fileData;
    if (typeof fileDataRaw === 'string') {
      fileData = JSON.parse(fileDataRaw);
    } else {
      fileData = fileDataRaw;
    }

    console.log('[Download] ファイルデータ取得成功:', {
      fileName: fileData.fileName,
      fileSize: fileData.fileSize,
    });

    // OTP検証
    if (fileData.otp !== otp) {
      console.log('[Download] OTP不一致');
      return res.status(403).json({ error: 'OTPが正しくありません' });
    }

    // 有効期限チェック
    const now = new Date();
    const expiryTime = new Date(fileData.expiryTime);
    if (now > expiryTime) {
      console.log('[Download] ファイル期限切れ');
      return res.status(410).json({ error: 'ファイルの有効期限が切れています' });
    }

    // base64からBufferに変換
    const fileBuffer = Buffer.from(fileData.fileBuffer, 'base64');
    console.log('[Download] ファイル変換完了:', fileBuffer.length, 'bytes');

    // ヘッダー設定
    res.setHeader('Content-Type', fileData.mimeType || 'application/octet-stream');
    res.setHeader('Content-Disposition', `attachment; filename="${encodeURIComponent(fileData.fileName)}"`);
    res.setHeader('Content-Length', fileBuffer.length);

    console.log('[Download] ダウンロード成功');

    // ファイル送信
    return res.status(200).send(fileBuffer);

  } catch (error) {
    console.error('[Download] エラー:', error);
    return res.status(500).json({
      error: 'ダウンロード中にエラーが発生しました',
      details: error.message,
    });
  }
};
