// api/files/upload.js
// ファイルアップロードAPI（Phase 21: KPI記録・圧縮機能追加版）

const { formidable } = require('formidable');
const fs = require('fs').promises;
const path = require('path');
const crypto = require('crypto');
const { encryptFile, encryptString } = require('../../lib/encryption');
const zlib = require('zlib');
const { promisify } = require('util');

const gzip = promisify(zlib.gzip);

module.exports = async (req, res) => {
    // CORSヘッダー設定
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    // OPTIONSリクエストの処理
    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }

    // POSTメソッドのみ許可
    if (req.method !== 'POST') {
        return res.status(405).json({
            success: false,
            error: 'Method not allowed'
        });
    }

    const startTime = Date.now();
    let kv = null;

    try {
        // KV接続
        try {
            kv = require('@vercel/kv');
        } catch (error) {
            console.log('KV not available (development mode)');
        }

        // 環境変数から設定を取得
        const MAX_FILE_SIZE = parseInt(process.env.MAX_FILE_SIZE) || 104857600; // 100MB
        const ENABLE_COMPRESSION = process.env.ENABLE_COMPRESSION === 'true';

        // formidableの設定
        const form = formidable({
            maxFileSize: MAX_FILE_SIZE,
            keepExtensions: true,
            multiples: false
        });

        // フォームデータを解析
        const [fields, files] = await new Promise((resolve, reject) => {
            form.parse(req, (err, fields, files) => {
                if (err) reject(err);
                else resolve([fields, files]);
            });
        });

        // ファイルの取得
        const uploadedFile = files.file ? (Array.isArray(files.file) ? files.file[0] : files.file) : null;
        
        if (!uploadedFile) {
            return res.status(400).json({
                success: false,
                error: 'ファイルが見つかりません'
            });
        }

        // 送信者・受信者情報の取得
	// formidable v3対応: フィールドは配列で返される
	const sender = (Array.isArray(fields.sender) ? fields.sender[0] : fields.sender) || '';
	const recipient = (Array.isArray(fields.recipient) ? fields.recipient[0] : fields.recipient) || '';
	const message = (Array.isArray(fields.message) ? fields.message[0] : fields.message) || '';

	// デバッグログ
	console.log('🔍 fields.sender:', fields.sender);
	console.log('🔍 fields.recipient:', fields.recipient);
	console.log('🔍 sender:', sender);
	console.log('🔍 recipient:', recipient);

        if (!sender || !recipient) {
            return res.status(400).json({
                success: false,
                error: '送信者と受信者のメールアドレスが必要です'
            });
        }

        // ファイル情報
        const originalFileName = uploadedFile.originalFilename || 'untitled';
        const originalSize = uploadedFile.size;
        const filePath = uploadedFile.filepath;

        console.log('📤 ファイルアップロード開始:', {
            fileName: originalFileName,
            size: originalSize,
            sender,
            recipient,
            compression: ENABLE_COMPRESSION
        });

        // ファイルをBufferに読み込み
        let fileBuffer = await fs.readFile(filePath);
        let processedSize = originalSize;
        let compressionRatio = 0;

        // 🆕 Phase 21: 圧縮機能
        if (ENABLE_COMPRESSION && originalSize > 1024) { // 1KB以上のファイルのみ圧縮
            try {
                const compressedBuffer = await gzip(fileBuffer);
                const compressedSize = compressedBuffer.length;
                
                // 圧縮率を計算
                compressionRatio = ((originalSize - compressedSize) / originalSize) * 100;
                
                console.log('🗜️ 圧縮結果:', {
                    originalSize,
                    compressedSize,
                    ratio: `${compressionRatio.toFixed(1)}%`
                });

                // 圧縮効果がある場合のみ圧縮版を使用（5%以上）
                if (compressionRatio > 5) {
                    fileBuffer = compressedBuffer;
                    processedSize = compressedSize;
                } else {
                    compressionRatio = 0; // 圧縮効果なし
                }
            } catch (compressionError) {
                console.error('圧縮エラー（元のファイルを使用）:', compressionError);
                compressionRatio = 0;
            }
        }

        // ファイルを暗号化
        const fileId = crypto.randomUUID();
        const encryptedFile = encryptFile(fileBuffer);

        // storageディレクトリを確認・作成
        const storageDir = '/tmp';
        // /tmpは常に存在するので、ディレクトリ作成は不要

        // 暗号化ファイルを保存
        const encryptedFilePath = path.join(storageDir, `${fileId}.enc`);
        await fs.writeFile(encryptedFilePath, encryptedFile.encryptedData);

        // メタデータを暗号化
        const encryptedFileName = encryptString(originalFileName);
        const encryptedSender = encryptString(sender);
        const encryptedRecipient = encryptString(recipient);
        const encryptedMessage = message ? encryptString(message) : null;

        // 有効期限を設定（7日後）
        const uploadedAt = new Date();
        const expiresAt = new Date(uploadedAt.getTime() + 7 * 24 * 60 * 60 * 1000);

        // メタデータを作成
        const fileMetadata = {
            id: fileId,
            
            // 暗号化されたファイル名
            fileName: encryptedFileName.data,
            fileNameSalt: encryptedFileName.salt,
            fileNameIv: encryptedFileName.iv,
            fileNameAuthTag: encryptedFileName.authTag,
            
            // 暗号化された送信者
            sender: encryptedSender.data,
            senderSalt: encryptedSender.salt,
            senderIv: encryptedSender.iv,
            senderAuthTag: encryptedSender.authTag,
            
            // 暗号化された受信者
            recipient: encryptedRecipient.data,
            recipientSalt: encryptedRecipient.salt,
            recipientIv: encryptedRecipient.iv,
            recipientAuthTag: encryptedRecipient.authTag,
            
            // 暗号化されたメッセージ（オプション）
            message: encryptedMessage ? encryptedMessage.data : null,
            messageSalt: encryptedMessage ? encryptedMessage.salt : null,
            messageIv: encryptedMessage ? encryptedMessage.iv : null,
            messageAuthTag: encryptedMessage ? encryptedMessage.authTag : null,
            
            // ファイル情報
            originalSize: originalSize,
            processedSize: processedSize,
            compressed: compressionRatio > 0,
            compressionRatio: compressionRatio,
            
            // 暗号化情報
            fileSalt: encryptedFile.salt,
            fileIv: encryptedFile.iv,
            fileAuthTag: encryptedFile.authTag,
            
            // タイムスタンプ
            uploadedAt: uploadedAt.toISOString(),
            expiresAt: expiresAt.toISOString()
        };

        // KVに保存（7日間のTTL）
        if (kv) {
            const ttl = 7 * 24 * 60 * 60; // 7日間（秒）
            await kv.set(`file:${fileId}`, fileMetadata, { ex: ttl });
            console.log('✅ KVにメタデータを保存しました（TTL: 7日）');
        }

        // 一時ファイルを削除
        try {
            await fs.unlink(filePath);
        } catch (error) {
            console.error('一時ファイル削除エラー:', error);
        }

        // 🆕 Phase 21: KPI統計を更新
        const processingTime = Date.now() - startTime;
        const transferSpeed = (processedSize / 1024 / 1024) / (processingTime / 1000); // MB/s

        if (kv) {
            try {
                // 既存のKPI統計を取得
                let kpiStats = await kv.get('kpi:stats') || {
                    transferSpeeds: [],
                    compressionRatios: [],
                    uploadAttempts: 0,
                    uploadSuccesses: 0,
                    fileSizes: []
                };

                // 転送速度を記録（直近100件まで）
                kpiStats.transferSpeeds.push(transferSpeed);
                if (kpiStats.transferSpeeds.length > 100) {
                    kpiStats.transferSpeeds.shift();
                }

                // 圧縮率を記録（圧縮した場合のみ）
                if (compressionRatio > 0) {
                    kpiStats.compressionRatios.push(compressionRatio);
                    if (kpiStats.compressionRatios.length > 100) {
                        kpiStats.compressionRatios.shift();
                    }
                }

                // アップロード試行回数と成功回数を記録
                kpiStats.uploadAttempts++;
                kpiStats.uploadSuccesses++;

                // ファイルサイズを記録（直近100件まで）
                kpiStats.fileSizes.push(originalSize);
                if (kpiStats.fileSizes.length > 100) {
                    kpiStats.fileSizes.shift();
                }

                // KPI統計を保存（30日間保持）
                await kv.set('kpi:stats', kpiStats, { ex: 30 * 24 * 60 * 60 });

                console.log('📊 KPI統計を更新しました:', {
                    transferSpeed: `${transferSpeed.toFixed(2)} MB/s`,
                    compressionRatio: compressionRatio > 0 ? `${compressionRatio.toFixed(1)}%` : 'なし',
                    processingTime: `${processingTime}ms`
                });
            } catch (kpiError) {
                console.error('KPI統計更新エラー:', kpiError);
                // KPI更新エラーは致命的ではないので続行
            }
        }

        console.log('✅ ファイルアップロード完了:', {
            fileId,
            processingTime: `${processingTime}ms`,
            transferSpeed: `${transferSpeed.toFixed(2)} MB/s`
        });

        // レスポンス返却
        return res.status(200).json({
            success: true,
            message: 'ファイルが正常にアップロードされました',
            file: {
                id: fileId,
                originalSize: originalSize,
                processedSize: processedSize,
                compressed: compressionRatio > 0,
                compressionRatio: compressionRatio > 0 ? `${compressionRatio.toFixed(1)}%` : null,
                uploadedAt: uploadedAt.toISOString(),
                expiresAt: expiresAt.toISOString(),
                processingTime: `${processingTime}ms`,
                transferSpeed: `${transferSpeed.toFixed(2)} MB/s`
            }
        });

    } catch (error) {
        console.error('❌ ファイルアップロードエラー:', error);

        // 🆕 Phase 21: 失敗もKPI統計に記録
        if (kv) {
            try {
                let kpiStats = await kv.get('kpi:stats') || {
                    transferSpeeds: [],
                    compressionRatios: [],
                    uploadAttempts: 0,
                    uploadSuccesses: 0,
                    fileSizes: []
                };
                
                kpiStats.uploadAttempts++;
                await kv.set('kpi:stats', kpiStats, { ex: 30 * 24 * 60 * 60 });
            } catch (kpiError) {
                console.error('KPI統計更新エラー:', kpiError);
            }
        }

        return res.status(500).json({
            success: false,
            error: 'ファイルのアップロードに失敗しました',
            details: error.message
        });
    }
};
