// api/upload.js [完全版]
const formidable = require('formidable');
const { createClient } = require('@vercel/kv');
const crypto = require('crypto');
const path = require('path');

module.exports = async (req, res) => {
  // CORS設定
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,PATCH,DELETE,POST,PUT');
  res.setHeader(
    'Access-Control-Allow-Headers',
    'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version'
  );

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ 
      success: false, 
      error: 'Method not allowed' 
    });
  }

  console.log('Upload API called');
  console.log('Headers:', req.headers);

  const form = formidable({
    maxFileSize: parseInt(process.env.MAX_FILE_SIZE || '52428800'), // 50MB
    keepExtensions: true,
    multiples: false
  });

  try {
    const [fields, files] = await form.parse(req);
    console.log('Parsed fields:', fields);
    console.log('Parsed files:', files);

    // ファイルの取得（formidableのバージョンによって構造が異なる）
    let file;
    if (files.file) {
      // files.fileが配列の場合
      if (Array.isArray(files.file)) {
        file = files.file[0];
      } else {
        file = files.file;
      }
    } else {
      // files直接の場合
      const fileKeys = Object.keys(files);
      if (fileKeys.length > 0) {
        const firstFile = files[fileKeys[0]];
        file = Array.isArray(firstFile) ? firstFile[0] : firstFile;
      }
    }

    if (!file) {
      console.error('No file found in request');
      return res.status(400).json({ 
        success: false, 
        error: 'ファイルが見つかりません' 
      });
    }

    console.log('File info:', {
      originalFilename: file.originalFilename,
      newFilename: file.newFilename,
      filepath: file.filepath,
      mimetype: file.mimetype,
      size: file.size
    });

    // ファイル名の取得（日本語対応）
    const originalFileName = file.originalFilename || file.name || 'untitled';
    const fileExtension = path.extname(originalFileName);
    const baseFileName = path.basename(originalFileName, fileExtension);

    // ファイルデータの読み込み
    const fs = require('fs').promises;
    const fileBuffer = await fs.readFile(file.filepath);

    // ファイルIDとOTPの生成
    const fileId = crypto.randomBytes(16).toString('hex');
    const otp = Math.random().toString(36).substring(2, 8).toUpperCase();

    // 有効期限の設定（7日後）
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + 7);

    // Vercel KV クライアントの初期化
    const kv = createClient({
      url: process.env.KV_REST_API_URL,
      token: process.env.KV_REST_API_TOKEN,
    });

    // ファイルメタデータの保存
    const fileData = {
      fileId,
      fileName: originalFileName,
      originalFileName: originalFileName,
      baseFileName: baseFileName,
      extension: fileExtension,
      otp,
      size: file.size,
      mimeType: file.mimetype || 'application/octet-stream',
      uploadedAt: new Date().toISOString(),
      expiresAt: expiresAt.toISOString()
    };

    // KVにメタデータを保存
    const fileKey = `file:${fileId}`;
    await kv.hset(fileKey, fileData);
    await kv.expire(fileKey, 7 * 24 * 60 * 60); // 7日後に自動削除

    // バイナリデータを別キーで保存
    const dataKey = `file-data:${fileId}`;
    await kv.set(dataKey, fileBuffer);
    await kv.expire(dataKey, 7 * 24 * 60 * 60); // 7日後に自動削除

    // 一時ファイルの削除
    try {
      await fs.unlink(file.filepath);
    } catch (err) {
      console.log('Temp file cleanup error (ignored):', err);
    }

    console.log('Upload successful:', {
      fileId,
      fileName: originalFileName,
      otp,
      size: file.size
    });

    // レスポンス
    res.status(200).json({
      success: true,
      fileId,
      otp,
      fileName: originalFileName,
      size: file.size,
      expiresAt: expiresAt.toISOString()
    });

  } catch (error) {
    console.error('Upload error:', error);
    res.status(500).json({ 
      success: false, 
      error: 'アップロード処理中にエラーが発生しました',
      details: error.message 
    });
  }
};